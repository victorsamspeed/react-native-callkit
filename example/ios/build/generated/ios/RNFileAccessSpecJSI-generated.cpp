/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "RNFileAccessSpecJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_addListener(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->addListener(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_removeListeners(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->removeListeners(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_appendFile(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->appendFile(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_cancelFetch(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->cancelFetch(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_concatFiles(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->concatFiles(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_cp(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->cp(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_cpAsset(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->cpAsset(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_cpExternal(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->cpExternal(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_df(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->df(
    rt
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_exists(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->exists(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_fetch(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->fetch(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_getAppGroupDir(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->getAppGroupDir(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->getConstants(
    rt
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_hash(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->hash(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_isDir(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->isDir(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_ls(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->ls(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_mkdir(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->mkdir(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_mv(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->mv(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_readFile(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->readFile(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_readFileChunk(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->readFileChunk(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_stat(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->stat(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_statDir(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->statDir(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_unlink(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->unlink(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_unzip(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->unzip(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeFileAccessCxxSpecJSI_writeFile(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeFileAccessCxxSpecJSI *>(&turboModule)->writeFile(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asString(rt)
  );
}

NativeFileAccessCxxSpecJSI::NativeFileAccessCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("FileAccess", jsInvoker) {
  methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeFileAccessCxxSpecJSI_addListener};
  methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeFileAccessCxxSpecJSI_removeListeners};
  methodMap_["appendFile"] = MethodMetadata {3, __hostFunction_NativeFileAccessCxxSpecJSI_appendFile};
  methodMap_["cancelFetch"] = MethodMetadata {1, __hostFunction_NativeFileAccessCxxSpecJSI_cancelFetch};
  methodMap_["concatFiles"] = MethodMetadata {2, __hostFunction_NativeFileAccessCxxSpecJSI_concatFiles};
  methodMap_["cp"] = MethodMetadata {2, __hostFunction_NativeFileAccessCxxSpecJSI_cp};
  methodMap_["cpAsset"] = MethodMetadata {3, __hostFunction_NativeFileAccessCxxSpecJSI_cpAsset};
  methodMap_["cpExternal"] = MethodMetadata {3, __hostFunction_NativeFileAccessCxxSpecJSI_cpExternal};
  methodMap_["df"] = MethodMetadata {0, __hostFunction_NativeFileAccessCxxSpecJSI_df};
  methodMap_["exists"] = MethodMetadata {1, __hostFunction_NativeFileAccessCxxSpecJSI_exists};
  methodMap_["fetch"] = MethodMetadata {3, __hostFunction_NativeFileAccessCxxSpecJSI_fetch};
  methodMap_["getAppGroupDir"] = MethodMetadata {1, __hostFunction_NativeFileAccessCxxSpecJSI_getAppGroupDir};
  methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativeFileAccessCxxSpecJSI_getConstants};
  methodMap_["hash"] = MethodMetadata {2, __hostFunction_NativeFileAccessCxxSpecJSI_hash};
  methodMap_["isDir"] = MethodMetadata {1, __hostFunction_NativeFileAccessCxxSpecJSI_isDir};
  methodMap_["ls"] = MethodMetadata {1, __hostFunction_NativeFileAccessCxxSpecJSI_ls};
  methodMap_["mkdir"] = MethodMetadata {1, __hostFunction_NativeFileAccessCxxSpecJSI_mkdir};
  methodMap_["mv"] = MethodMetadata {2, __hostFunction_NativeFileAccessCxxSpecJSI_mv};
  methodMap_["readFile"] = MethodMetadata {2, __hostFunction_NativeFileAccessCxxSpecJSI_readFile};
  methodMap_["readFileChunk"] = MethodMetadata {4, __hostFunction_NativeFileAccessCxxSpecJSI_readFileChunk};
  methodMap_["stat"] = MethodMetadata {1, __hostFunction_NativeFileAccessCxxSpecJSI_stat};
  methodMap_["statDir"] = MethodMetadata {1, __hostFunction_NativeFileAccessCxxSpecJSI_statDir};
  methodMap_["unlink"] = MethodMetadata {1, __hostFunction_NativeFileAccessCxxSpecJSI_unlink};
  methodMap_["unzip"] = MethodMetadata {2, __hostFunction_NativeFileAccessCxxSpecJSI_unzip};
  methodMap_["writeFile"] = MethodMetadata {3, __hostFunction_NativeFileAccessCxxSpecJSI_writeFile};
}


} // namespace facebook::react
