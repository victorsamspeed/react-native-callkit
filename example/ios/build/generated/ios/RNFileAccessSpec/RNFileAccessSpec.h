/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of RNFileAccessSpec symbols
#ifndef RNFileAccessSpec_H
#define RNFileAccessSpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


NS_ASSUME_NONNULL_BEGIN
namespace JS {
  namespace NativeFileAccess {
    struct SpecFetchInit {
      NSString *body() const;
      id<NSObject> _Nullable headers() const;
      NSString *method() const;
      NSString *network() const;
      NSString *path() const;

      SpecFetchInit(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeFileAccess_SpecFetchInit)
+ (RCTManagedPointer *)JS_NativeFileAccess_SpecFetchInit:(id)json;
@end
namespace JS {
  namespace NativeFileAccess {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<NSString *> CacheDir;
          NSString *DatabaseDir;
          RCTRequired<NSString *> DocumentDir;
          NSString *LibraryDir;
          RCTRequired<NSString *> MainBundleDir;
          NSString *SDCardDir;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeFileAccessSpec <RCTBridgeModule, RCTTurboModule>

- (void)addListener:(NSString *)eventType;
- (void)removeListeners:(double)count;
- (void)appendFile:(NSString *)path
              data:(NSString *)data
          encoding:(NSString *)encoding
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)cancelFetch:(double)requestId
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)concatFiles:(NSString *)source
             target:(NSString *)target
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)cp:(NSString *)source
    target:(NSString *)target
   resolve:(RCTPromiseResolveBlock)resolve
    reject:(RCTPromiseRejectBlock)reject;
- (void)cpAsset:(NSString *)asset
         target:(NSString *)target
           type:(NSString *)type
        resolve:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)cpExternal:(NSString *)source
        targetName:(NSString *)targetName
               dir:(NSString *)dir
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)df:(RCTPromiseResolveBlock)resolve
    reject:(RCTPromiseRejectBlock)reject;
- (void)exists:(NSString *)path
       resolve:(RCTPromiseResolveBlock)resolve
        reject:(RCTPromiseRejectBlock)reject;
- (void)fetch:(double)requestId
     resource:(NSString *)resource
         init:(JS::NativeFileAccess::SpecFetchInit &)init;
- (void)getAppGroupDir:(NSString *)groupName
               resolve:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)hash:(NSString *)path
   algorithm:(NSString *)algorithm
     resolve:(RCTPromiseResolveBlock)resolve
      reject:(RCTPromiseRejectBlock)reject;
- (void)isDir:(NSString *)path
      resolve:(RCTPromiseResolveBlock)resolve
       reject:(RCTPromiseRejectBlock)reject;
- (void)ls:(NSString *)path
   resolve:(RCTPromiseResolveBlock)resolve
    reject:(RCTPromiseRejectBlock)reject;
- (void)mkdir:(NSString *)path
      resolve:(RCTPromiseResolveBlock)resolve
       reject:(RCTPromiseRejectBlock)reject;
- (void)mv:(NSString *)source
    target:(NSString *)target
   resolve:(RCTPromiseResolveBlock)resolve
    reject:(RCTPromiseRejectBlock)reject;
- (void)readFile:(NSString *)path
        encoding:(NSString *)encoding
         resolve:(RCTPromiseResolveBlock)resolve
          reject:(RCTPromiseRejectBlock)reject;
- (void)readFileChunk:(NSString *)path
               offset:(double)offset
               length:(double)length
             encoding:(NSString *)encoding
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)stat:(NSString *)path
     resolve:(RCTPromiseResolveBlock)resolve
      reject:(RCTPromiseRejectBlock)reject;
- (void)statDir:(NSString *)path
        resolve:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)unlink:(NSString *)path
       resolve:(RCTPromiseResolveBlock)resolve
        reject:(RCTPromiseRejectBlock)reject;
- (void)unzip:(NSString *)source
       target:(NSString *)target
      resolve:(RCTPromiseResolveBlock)resolve
       reject:(RCTPromiseRejectBlock)reject;
- (void)writeFile:(NSString *)path
             data:(NSString *)data
         encoding:(NSString *)encoding
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeFileAccess::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeFileAccess::Constants::Builder>)getConstants;

@end

@interface NativeFileAccessSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeFileAccess'
   */
  class JSI_EXPORT NativeFileAccessSpecJSI : public ObjCTurboModule {
  public:
    NativeFileAccessSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline NSString *JS::NativeFileAccess::SpecFetchInit::body() const
{
  id const p = _v[@"body"];
  return RCTBridgingToOptionalString(p);
}
inline id<NSObject> _Nullable JS::NativeFileAccess::SpecFetchInit::headers() const
{
  id const p = _v[@"headers"];
  return p;
}
inline NSString *JS::NativeFileAccess::SpecFetchInit::method() const
{
  id const p = _v[@"method"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeFileAccess::SpecFetchInit::network() const
{
  id const p = _v[@"network"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeFileAccess::SpecFetchInit::path() const
{
  id const p = _v[@"path"];
  return RCTBridgingToOptionalString(p);
}
inline JS::NativeFileAccess::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto CacheDir = i.CacheDir.get();
  d[@"CacheDir"] = CacheDir;
  auto DatabaseDir = i.DatabaseDir;
  d[@"DatabaseDir"] = DatabaseDir;
  auto DocumentDir = i.DocumentDir.get();
  d[@"DocumentDir"] = DocumentDir;
  auto LibraryDir = i.LibraryDir;
  d[@"LibraryDir"] = LibraryDir;
  auto MainBundleDir = i.MainBundleDir.get();
  d[@"MainBundleDir"] = MainBundleDir;
  auto SDCardDir = i.SDCardDir;
  d[@"SDCardDir"] = SDCardDir;
  return d;
}) {}
inline JS::NativeFileAccess::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
NS_ASSUME_NONNULL_END
#endif // RNFileAccessSpec_H
