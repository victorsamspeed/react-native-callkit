/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNFileAccessSpec.h"


@implementation NativeFileAccessSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeFileAccess_SpecFetchInit)
+ (RCTManagedPointer *)JS_NativeFileAccess_SpecFetchInit:(id)json
{
  return facebook::react::managedPointer<JS::NativeFileAccess::SpecFetchInit>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_addListener(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "addListener", @selector(addListener:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_removeListeners(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "removeListeners", @selector(removeListeners:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_appendFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "appendFile", @selector(appendFile:data:encoding:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_cancelFetch(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "cancelFetch", @selector(cancelFetch:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_concatFiles(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "concatFiles", @selector(concatFiles:target:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_cp(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "cp", @selector(cp:target:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_cpAsset(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "cpAsset", @selector(cpAsset:target:type:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_cpExternal(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "cpExternal", @selector(cpExternal:targetName:dir:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_df(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "df", @selector(df:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_exists(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "exists", @selector(exists:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_fetch(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "fetch", @selector(fetch:resource:init:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_getAppGroupDir(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getAppGroupDir", @selector(getAppGroupDir:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_hash(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "hash", @selector(hash:algorithm:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_isDir(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "isDir", @selector(isDir:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_ls(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "ls", @selector(ls:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_mkdir(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "mkdir", @selector(mkdir:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_mv(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "mv", @selector(mv:target:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_readFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "readFile", @selector(readFile:encoding:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_readFileChunk(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "readFileChunk", @selector(readFileChunk:offset:length:encoding:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_stat(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "stat", @selector(stat:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_statDir(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "statDir", @selector(statDir:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_unlink(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "unlink", @selector(unlink:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_unzip(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "unzip", @selector(unzip:target:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_writeFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "writeFile", @selector(writeFile:data:encoding:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFileAccessSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, ObjectKind, "getConstants", @selector(getConstants), args, count);
    }

  NativeFileAccessSpecJSI::NativeFileAccessSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeFileAccessSpecJSI_addListener};
        
        
        methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeFileAccessSpecJSI_removeListeners};
        
        
        methodMap_["appendFile"] = MethodMetadata {3, __hostFunction_NativeFileAccessSpecJSI_appendFile};
        
        
        methodMap_["cancelFetch"] = MethodMetadata {1, __hostFunction_NativeFileAccessSpecJSI_cancelFetch};
        
        
        methodMap_["concatFiles"] = MethodMetadata {2, __hostFunction_NativeFileAccessSpecJSI_concatFiles};
        
        
        methodMap_["cp"] = MethodMetadata {2, __hostFunction_NativeFileAccessSpecJSI_cp};
        
        
        methodMap_["cpAsset"] = MethodMetadata {3, __hostFunction_NativeFileAccessSpecJSI_cpAsset};
        
        
        methodMap_["cpExternal"] = MethodMetadata {3, __hostFunction_NativeFileAccessSpecJSI_cpExternal};
        
        
        methodMap_["df"] = MethodMetadata {0, __hostFunction_NativeFileAccessSpecJSI_df};
        
        
        methodMap_["exists"] = MethodMetadata {1, __hostFunction_NativeFileAccessSpecJSI_exists};
        
        
        methodMap_["fetch"] = MethodMetadata {3, __hostFunction_NativeFileAccessSpecJSI_fetch};
        setMethodArgConversionSelector(@"fetch", 2, @"JS_NativeFileAccess_SpecFetchInit:");
        
        methodMap_["getAppGroupDir"] = MethodMetadata {1, __hostFunction_NativeFileAccessSpecJSI_getAppGroupDir};
        
        
        methodMap_["hash"] = MethodMetadata {2, __hostFunction_NativeFileAccessSpecJSI_hash};
        
        
        methodMap_["isDir"] = MethodMetadata {1, __hostFunction_NativeFileAccessSpecJSI_isDir};
        
        
        methodMap_["ls"] = MethodMetadata {1, __hostFunction_NativeFileAccessSpecJSI_ls};
        
        
        methodMap_["mkdir"] = MethodMetadata {1, __hostFunction_NativeFileAccessSpecJSI_mkdir};
        
        
        methodMap_["mv"] = MethodMetadata {2, __hostFunction_NativeFileAccessSpecJSI_mv};
        
        
        methodMap_["readFile"] = MethodMetadata {2, __hostFunction_NativeFileAccessSpecJSI_readFile};
        
        
        methodMap_["readFileChunk"] = MethodMetadata {4, __hostFunction_NativeFileAccessSpecJSI_readFileChunk};
        
        
        methodMap_["stat"] = MethodMetadata {1, __hostFunction_NativeFileAccessSpecJSI_stat};
        
        
        methodMap_["statDir"] = MethodMetadata {1, __hostFunction_NativeFileAccessSpecJSI_statDir};
        
        
        methodMap_["unlink"] = MethodMetadata {1, __hostFunction_NativeFileAccessSpecJSI_unlink};
        
        
        methodMap_["unzip"] = MethodMetadata {2, __hostFunction_NativeFileAccessSpecJSI_unzip};
        
        
        methodMap_["writeFile"] = MethodMetadata {3, __hostFunction_NativeFileAccessSpecJSI_writeFile};
        
        
        methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativeFileAccessSpecJSI_getConstants};
        
  }
} // namespace facebook::react
