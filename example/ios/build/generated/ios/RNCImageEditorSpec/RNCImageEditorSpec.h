/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of RNCImageEditorSpec symbols
#ifndef RNCImageEditorSpec_H
#define RNCImageEditorSpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


NS_ASSUME_NONNULL_BEGIN
namespace JS {
  namespace NativeRNCImageEditor {
    struct SpecCropImageCropDataOffset {
      double x() const;
      double y() const;

      SpecCropImageCropDataOffset(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeRNCImageEditor_SpecCropImageCropDataOffset)
+ (RCTManagedPointer *)JS_NativeRNCImageEditor_SpecCropImageCropDataOffset:(id)json;
@end
namespace JS {
  namespace NativeRNCImageEditor {
    struct SpecCropImageCropDataSize {
      double width() const;
      double height() const;

      SpecCropImageCropDataSize(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeRNCImageEditor_SpecCropImageCropDataSize)
+ (RCTManagedPointer *)JS_NativeRNCImageEditor_SpecCropImageCropDataSize:(id)json;
@end
namespace JS {
  namespace NativeRNCImageEditor {
    struct SpecCropImageCropDataDisplaySize {
      double width() const;
      double height() const;

      SpecCropImageCropDataDisplaySize(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeRNCImageEditor_SpecCropImageCropDataDisplaySize)
+ (RCTManagedPointer *)JS_NativeRNCImageEditor_SpecCropImageCropDataDisplaySize:(id)json;
@end
namespace JS {
  namespace NativeRNCImageEditor {
    struct SpecCropImageCropData {
      JS::NativeRNCImageEditor::SpecCropImageCropDataOffset offset() const;
      JS::NativeRNCImageEditor::SpecCropImageCropDataSize size() const;
      std::optional<JS::NativeRNCImageEditor::SpecCropImageCropDataDisplaySize> displaySize() const;
      NSString *resizeMode() const;
      std::optional<double> quality() const;
      NSString *format() const;
      std::optional<bool> includeBase64() const;
      id<NSObject> _Nullable headers() const;

      SpecCropImageCropData(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeRNCImageEditor_SpecCropImageCropData)
+ (RCTManagedPointer *)JS_NativeRNCImageEditor_SpecCropImageCropData:(id)json;
@end
@protocol NativeRNCImageEditorSpec <RCTBridgeModule, RCTTurboModule>

- (void)cropImage:(NSString *)uri
         cropData:(JS::NativeRNCImageEditor::SpecCropImageCropData &)cropData
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativeRNCImageEditorSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeRNCImageEditor'
   */
  class JSI_EXPORT NativeRNCImageEditorSpecJSI : public ObjCTurboModule {
  public:
    NativeRNCImageEditorSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline double JS::NativeRNCImageEditor::SpecCropImageCropDataOffset::x() const
{
  id const p = _v[@"x"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeRNCImageEditor::SpecCropImageCropDataOffset::y() const
{
  id const p = _v[@"y"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeRNCImageEditor::SpecCropImageCropDataSize::width() const
{
  id const p = _v[@"width"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeRNCImageEditor::SpecCropImageCropDataSize::height() const
{
  id const p = _v[@"height"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeRNCImageEditor::SpecCropImageCropDataDisplaySize::width() const
{
  id const p = _v[@"width"];
  return RCTBridgingToDouble(p);
}
inline double JS::NativeRNCImageEditor::SpecCropImageCropDataDisplaySize::height() const
{
  id const p = _v[@"height"];
  return RCTBridgingToDouble(p);
}
inline JS::NativeRNCImageEditor::SpecCropImageCropDataOffset JS::NativeRNCImageEditor::SpecCropImageCropData::offset() const
{
  id const p = _v[@"offset"];
  return JS::NativeRNCImageEditor::SpecCropImageCropDataOffset(p);
}
inline JS::NativeRNCImageEditor::SpecCropImageCropDataSize JS::NativeRNCImageEditor::SpecCropImageCropData::size() const
{
  id const p = _v[@"size"];
  return JS::NativeRNCImageEditor::SpecCropImageCropDataSize(p);
}
inline std::optional<JS::NativeRNCImageEditor::SpecCropImageCropDataDisplaySize> JS::NativeRNCImageEditor::SpecCropImageCropData::displaySize() const
{
  id const p = _v[@"displaySize"];
  return (p == nil ? std::nullopt : std::make_optional(JS::NativeRNCImageEditor::SpecCropImageCropDataDisplaySize(p)));
}
inline NSString *JS::NativeRNCImageEditor::SpecCropImageCropData::resizeMode() const
{
  id const p = _v[@"resizeMode"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<double> JS::NativeRNCImageEditor::SpecCropImageCropData::quality() const
{
  id const p = _v[@"quality"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeRNCImageEditor::SpecCropImageCropData::format() const
{
  id const p = _v[@"format"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativeRNCImageEditor::SpecCropImageCropData::includeBase64() const
{
  id const p = _v[@"includeBase64"];
  return RCTBridgingToOptionalBool(p);
}
inline id<NSObject> _Nullable JS::NativeRNCImageEditor::SpecCropImageCropData::headers() const
{
  id const p = _v[@"headers"];
  return p;
}
NS_ASSUME_NONNULL_END
#endif // RNCImageEditorSpec_H
