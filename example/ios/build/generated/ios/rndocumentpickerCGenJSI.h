/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeDocumentPickerCxxSpecJSI : public TurboModule {
protected:
  NativeDocumentPickerCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value pick(jsi::Runtime &rt, jsi::Object options) = 0;
  virtual jsi::Value saveDocument(jsi::Runtime &rt, jsi::Object options) = 0;
  virtual jsi::Value writeDocuments(jsi::Runtime &rt, jsi::Object options) = 0;
  virtual jsi::Value pickDirectory(jsi::Runtime &rt, jsi::Object options) = 0;
  virtual jsi::Value keepLocalCopy(jsi::Runtime &rt, jsi::Object options) = 0;
  virtual jsi::Object isKnownType(jsi::Runtime &rt, jsi::String kind, jsi::String value) = 0;
  virtual jsi::Value releaseSecureAccess(jsi::Runtime &rt, jsi::Array uris) = 0;
  virtual jsi::Value releaseLongTermAccess(jsi::Runtime &rt, jsi::Array uris) = 0;

};

template <typename T>
class JSI_EXPORT NativeDocumentPickerCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "RNDocumentPicker";

protected:
  NativeDocumentPickerCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeDocumentPickerCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeDocumentPickerCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeDocumentPickerCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Value pick(jsi::Runtime &rt, jsi::Object options) override {
      static_assert(
          bridging::getParameterCount(&T::pick) == 2,
          "Expected pick(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::pick, jsInvoker_, instance_, std::move(options));
    }
    jsi::Value saveDocument(jsi::Runtime &rt, jsi::Object options) override {
      static_assert(
          bridging::getParameterCount(&T::saveDocument) == 2,
          "Expected saveDocument(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::saveDocument, jsInvoker_, instance_, std::move(options));
    }
    jsi::Value writeDocuments(jsi::Runtime &rt, jsi::Object options) override {
      static_assert(
          bridging::getParameterCount(&T::writeDocuments) == 2,
          "Expected writeDocuments(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::writeDocuments, jsInvoker_, instance_, std::move(options));
    }
    jsi::Value pickDirectory(jsi::Runtime &rt, jsi::Object options) override {
      static_assert(
          bridging::getParameterCount(&T::pickDirectory) == 2,
          "Expected pickDirectory(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::pickDirectory, jsInvoker_, instance_, std::move(options));
    }
    jsi::Value keepLocalCopy(jsi::Runtime &rt, jsi::Object options) override {
      static_assert(
          bridging::getParameterCount(&T::keepLocalCopy) == 2,
          "Expected keepLocalCopy(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::keepLocalCopy, jsInvoker_, instance_, std::move(options));
    }
    jsi::Object isKnownType(jsi::Runtime &rt, jsi::String kind, jsi::String value) override {
      static_assert(
          bridging::getParameterCount(&T::isKnownType) == 3,
          "Expected isKnownType(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::isKnownType, jsInvoker_, instance_, std::move(kind), std::move(value));
    }
    jsi::Value releaseSecureAccess(jsi::Runtime &rt, jsi::Array uris) override {
      static_assert(
          bridging::getParameterCount(&T::releaseSecureAccess) == 2,
          "Expected releaseSecureAccess(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::releaseSecureAccess, jsInvoker_, instance_, std::move(uris));
    }
    jsi::Value releaseLongTermAccess(jsi::Runtime &rt, jsi::Array uris) override {
      static_assert(
          bridging::getParameterCount(&T::releaseLongTermAccess) == 2,
          "Expected releaseLongTermAccess(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::releaseLongTermAccess, jsInvoker_, instance_, std::move(uris));
    }

  private:
    friend class NativeDocumentPickerCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
